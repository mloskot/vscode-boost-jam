{
    "information_for_contributors": [
        "This file is part of Visual Studio Code language extension for Boost.Jam - http://boost.org/build/",
        "This file contains language grammar for Boost.Jam syntax highlighting.",
        "Thus file was written from scratch by Mateusz Loskot <mateusz@loskot.net>.",
        "The extension is developed at https://github.com/mloskot/vscode-boost-jam.",
        "If you want to provide a fix or improvement, awesome!",
        "Please create a pull request against the git repository at GitHub."
    ],
    "version": "0.0.2",
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Boost.Jam",
    "scopeName": "source.bjam",
    "fileTypes": [
        "jam"
    ],
    "patterns": [
        {
            "name": "comment.block.bjam",
            "begin": "#\\|",
            "end": "\\|#"
        },
        {
            "name": "comment.line.number-sign.bjam",
            "begin": "#",
            "end": "\\n"
        },
        {
            "comment": "class definition, captures names of base class and optional derived class",
            "match": "\\b(class)\\s+([a-zA-Z_][a-zA-Z0-9_\\-]*)(?:\\s+\\:\\s+([a-zA-Z_][a-zA-Z0-9_\\-]*))?",
            "captures": {
                "1": {
                    "name": "storage.type.class.bjam"
                },
                "2": {
                    "name": "entity.name.type.class.bjam"
                },
                "3": {
                    "name": "entity.name.type.class.bjam"
                }
            }
        },
        {
            "comment": "rule definition, captures name of rule",
            "begin": "\\b(rule)\\s+([a-zA-Z_][a-zA-Z0-9_\\-]*)\\s+(?:[\\(\\{\\s])?",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.rule.bjam"
                },
                "2": {
                    "name": "entity.name.function.rule.bjam"
                }
            },
            "end": "\\)|\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.bjam"
                }
            },
            "name": "meta.rule.bjam",
            "patterns": [
                {
                    "match": "[a-zA-Z_][a-zA-Z0-9_\\-]*",
                    "name": "variable.parameter.function.rule.bjam"
                },
                {
                    "match": "(?:\\s(\\?|\\*|\\+)\\s)",
                    "name": "keyword.operator.parameter.modifier.bjam"
                },
                {
                    "match": ":",
                    "name": "punctuation.separator.arguments.bjam"
                }
            ]
        },
        {
            "name": "keyword.other.builtin.rule.bjam",
            "match": "\\b(alias|exe|obj|lib|(?:(?:use|build)\\-)?project|test\\-suite|variant|ALWAYS|BACKTRACE|DEPENDS|ECHO|EXIT|FAIL_EXPECTED|FILE_OPEN|GLOB(?:_ARCHIVE)?|INCLUDES|ISFILE|LEAVES|MATCH|MD5|NOCARE|NOTFILE|NOUPDATE|PAD|PRECIOUS|RMOLD|SHELL|SPLIT(?:_[A-Z_]+)?|TEMPORARY|UPDATE(_NOW)?)\\b"
        },
        {
            "name": "keyword.control.bjam",
            "match": "\\b(actions|break|case|continue|default(\\-build)?|else|for|if|import|(?<!\\>)on|return|switch|while)\\b"
        },
        {
            "name": "constant.language.bjam",
            "match": "\\b(clang|darwin|debug|dynamic|gcc|intel|msvc|multi|no|(?<=\\>)on|release|single|shared|static|stlport|EXE|LIB|OBJ|IMPORT_LIB|SHARED_LIB|STATIC_LIB)\\b"
        },
        {
            "name": "storage.type.variable.bjam",
            "match": "\\b((path\\-)?constant|default|local)\\b"
        },
        {
            "match": "\\b(false|true)\\b",
            "captures": {
                "1": {
                    "name": "constant.language.bjam"
                }
            }
        },
        {
            "name": "entity.other.attribute-name",
            "match": "(\\<[a-z\\-]+\\>)"
        },
        {
            "comment": "variable access and expansion",
            "begin": "\\$\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.bjam"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.bjam"
                }
            },
            "name": "string.interpolated.dollar.bjam",
            "patterns": [
                {
                    "include": "$self"
                },
                {
                    "comment": "variable modifiers",
                    "match": "(\\:)([BDGLMPRSTUW])(\\=)?",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.bjam"
                        },
                        "2": {
                            "name": "constant.language.bjam"
                        },
                        "3": {
                            "name": "keyword.operator.bjam"
                        }
                    }
                },
                {
                    "comment": "variable element selection",
                    "name": "keyword.operator.bjam",
                    "match": "(?<=[0-9])(\\-)"
                }
            ]
        },
        {
            "match": "\\s(\\*|\\=|\\!=|\\+=?|\\?=?|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)|in|&&|\\|\\||\\!)\\s",
            "captures": {
                "1": {
                    "name": "keyword.operator.bjam"
                }
            }
        },
        {
            "comment": "-<property>value syntax in specification to remove given requirements",
            "match": "\\s(\\-)(?=\\<)",
            "captures": {
                "1": {
                    "name": "keyword.operator.bjam"
                }
            }
        },
        {
            "comment": "Symbol && separates property values and specify that their order should be preserved.",
            "match": "(?:\\S)(&&)(?:\\S)",
            "captures": {
                "1": {
                    "name": "keyword.operator.property.separator.bjam"
                }
            }
        },
        {
            "name": "punctuation.terminator.bjam",
            "match": ";"
        }
    ],
    "repository": {}
}
